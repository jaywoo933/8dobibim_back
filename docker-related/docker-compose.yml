#docker-related/docker-compose.yml

services:
  # --- Reverse Proxy Service (Nginx for A/B Testing) ---
  nginx_proxy:
    image: nginx:latest # Nginx 이미지 사용
    container_name: nginx_ab_router # 컨테이너 이름 변경
    # 사용자가 외부에서 접근할 포트를 Nginx로 매핑합니다.
    # 기존 OpenWebUI 포트(8080)를 Nginx로 연결합니다.
    ports:
      - "8080:80" # 호스트의 8080 포트를 Nginx 컨테이너의 80 포트로 매핑
    volumes:
      # 사용자 정의 Nginx 설정 파일을 컨테이너 내부에 마운트합니다.
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # Nginx 로그를 호스트의 명명된 볼륨에 기록하도록 설정 (Promtail이 읽을 수 있도록)
      - nginx_logs:/var/log/nginx # 이 부분이 이미 활성화되어 있는지 확인 또는 활성화
    depends_on:
      # Nginx는 OpenWebUI V1/V2 서비스가 준비된 후에 시작되어야 합니다.
      - open-webui_v1
      - open-webui_v2
    networks:
      - webui_network
    restart: unless-stopped

  # ############################################
  # OpenWebUI V1 - Web Interface for LLMs (Version A)
  # ############################################
  open-webui_v1:
    # A 버전에 해당하는 OpenWebUI 이미지 태그 또는 빌드 설정
    # image: ghcr.io/open-webui/open-webui:main # 예시: 최신 main 태그
    image: ghcr.io/open-webui/open-webui:v0.6.6 # 예시: latest 태그 (사용하는 V1 이미지 지정)
    container_name: open_webui_v1
    # 이 서비스는 Nginx 프록시에서만 접근하므로 호스트 포트 노출은 필요 없습니다.
    # ports: # 기존 "8080:8080" 매핑 제거
    environment:
      # OpenWebUI가 LiteLLM 프록시를 바라보도록 설정합니다.
      # Docker 내부 네트워크에서는 서비스 이름(litellm)으로 접근합니다.
      - OPENAI_API_BASE_URL=http://litellm:4000/ # LiteLLM 서비스 주소 (V1/V2 동일)
      - OPENAI_API_KEY=dummy-key # LiteLLM이 자체 인증 처리 시 임의 값
      # 필요에 따라 OpenWebUI V1의 특정 환경 변수 추가 가능
    volumes:
      # V1의 설정 및 데이터 저장을 위한 전용 볼륨 (권장)
      - open_webui_v1_data:/app/backend/data
    depends_on:
      - litellm # LiteLLM이 먼저 시작되도록 의존성 설정
    networks:
      - webui_network
    restart: unless-stopped

  # ############################################
  # OpenWebUI V2 - Web Interface for LLMs (Version B)
  # ############################################
  open-webui_v2:
    # B 버전에 해당하는 OpenWebUI 이미지 태그 또는 빌드 설정
    # image: ghcr.io/open-webui/open-webui:another-feature-tag # 예시: 다른 기능 태그
    # 또는 로컬 Dockerfile로 빌드
    # build:
    #   context: ../path/to/your/openwebui/v2/code # V2 OpenWebUI 소스 코드 경로
    #   dockerfile: Dockerfile # V2용 Dockerfile
    image: ghcr.io/open-webui/open-webui:main # 예시: V2 이미지 태그 지정
    container_name: open_webui_v2
    # 이 서비스도 Nginx 프록시에서만 접근하므로 호스트 포트 노출은 필요 없습니다.
    # ports: # 기존 "8080:8080" 매핑 제거
    environment:
      # LiteLLM 백엔드 주소 (V1과 동일)
      - OPENAI_API_BASE_URL=http://litellm:4000/
      - OPENAI_API_KEY=dummy-key
      # 필요에 따라 OpenWebUI V2의 특정 환경 변수 추가 가능
    volumes:
      # V2의 설정 및 데이터 저장을 위한 전용 볼륨 (권장)
      - open_webui_v2_data:/app/backend/data
    depends_on:
      - litellm # LiteLLM이 먼저 시작되도록 의존성 설정
    networks:
      - webui_network
    restart: unless-stopped

  # ############################################
  # LiteLLM - LLM Proxy (OpenWebUI V1/V2의 공통 백엔드)
  # ############################################
  litellm:
    image: ghcr.io/berriai/litellm:main-stable # 안정적인 최신 LiteLLM 이미지 사용
    container_name: litellm_proxy # 이름 변경 (선택 사항)
    # 이 서비스는 OpenWebUI 컨테이너들에서만 접근하므로 호스트 포트 매핑이 필수는 아닙니다.
    # 필요에 따라 외부 접근용으로 남겨둘 수 있지만, A/B 테스트 아키텍처 상의 필수 요소는 아닙니다.
    ports:
      - "4000:4000" # 호스트의 4000번 포트를 컨테이너의 4000번 포트로 매핑 (외부에서 직접 접근 시)
    environment:
      # .env 파일 또는 직접 여기에 API 키를 설정하세요.
      # LiteLLM 설정 파일 (config.yaml) 내에서도 설정할 수 있습니다.
      - AZURE_API_KEY=${AZURE_API_KEY}
      - AZURE_API_BASE=${AZURE_API_BASE}
      - AZURE_API_VERSION=${AZURE_API_VERSION}
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY}
      - LITELLM_SALT_KEY=${LITELLM_SALT_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      # 추가 클라우드 서비스 또는 로컬 모델 API 키/주소 등
    volumes:
      - ./litellm_config.yaml:/app/config.yaml # 호스트의 설정 파일을 컨테이너 내부로 마운트
      # - litellm_data:/app/data # 필요시 LiteLLM 데이터 볼륨 (예: 캐시)
    command: ["--host", "0.0.0.0", "--port", "4000", "--config", "/app/config.yaml", "--detailed_debug"] # 0.0.0.0으로 설정하여 컨테이너 외부 접근 허용 및 설정 파일 사용
    depends_on:
      - postgres # postgres이 먼저 시작되도록 의존성 설정

    networks:
      - webui_network
    restart: unless-stopped

  # ############################################
  # PostgreSQL Database
  # ############################################
  postgres:
    image: postgres:16 # PostgreSQL 버전 16 이미지 사용
    container_name: postgres_db
    environment:
      # .env 파일에서 PostgreSQL 설정값을 가져옵니다.
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data # 데이터베이스 데이터 영속화를 위한 볼륨 마운트
    ports:
      - "5432:5432" # 호스트와 포트 매핑 (외부 DB 툴 연결용, 필요 없으면 제거 가능)
    networks:
      - webui_network
    restart: unless-stopped

  # ############################################
  # Prometheus Monitoring
  # ############################################
  prometheus:
    image: prom/prometheus
    container_name: prometheus_monitor
    volumes:
      - ./prometheus_config:/etc/prometheus  # 로컬 디렉토리를 컨테이너 디렉토리에 마운트
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml' # 설정 파일 경로는 그대로 유지 (마운트된 디렉토리 기준)
    ports:
      - "9090:9090" # Prometheus 웹 UI 포트
    networks:
      - webui_network
    restart: unless-stopped
  # ############################################
  # nginx 모니터링을 위한 exporter
  # ############################################
  nginx_exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx_exporter
    command:
      - -nginx.scrape-uri=http://nginx_proxy/nginx_status
    ports:
      - "9113:9113"
    depends_on:
      - nginx_proxy
    networks:
      - webui_network
    restart: unless-stopped
  # ############################################
  # NginX 테스트 상황 시각화를 위한 Gafana, Loki, Promtail
  # ############################################    
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - webui_network
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   depends_on:
  #     - prometheus
  #   restart: unless-stopped

  # loki:
  #   image: grafana/loki:2.9.2
  #   container_name: loki
  #   ports:
  #     - "3100:3100"
  #   command: -config.file=/etc/loki/local-config.yaml
  #   networks:
  #     - webui_network

  # promtail:
  #   image: grafana/promtail:2.9.2 # 또는 다른 버전 유지
  #   container_name: promtail
  #   volumes:
  #     # Nginx 로그 볼륨을 Promtail 컨테이너의 동일 경로에 마운트 (읽기 전용 권장)
  #     - nginx_logs:/var/log/nginx:ro # Nginx와 같은 볼륨을 마운트
  #     # Promtail 설정을 마운트합니다.
  #     - ./promtail-config.yml:/etc/promtail/config.yml
  #     # Docker 소켓 마운트는 이 방식에서는 필요 없습니다. (주석 처리하거나 삭제)
  #     # - /var/run/docker.sock:/var/run/docker.sock
  #   command: -config.file=/etc/promtail/config.yml
  #   networks:
  #     - webui_network
  #   depends_on:
  #     - loki
  #     - nginx_proxy # Nginx가 로그를 기록한 후에 Promtail이 시작되도록 의존성 추가 (선택 사항이지만 안전함)

networks:
  webui_network:
    driver: bridge # Docker의 기본 브릿지 네트워크 사용

volumes:
  postgres_data: # PostgreSQL 데이터 볼륨
  open_webui_v1_data: # OpenWebUI V1 데이터를 영속적으로 저장할 명명된 볼륨 (새로 추가)
  open_webui_v2_data: # OpenWebUI V2 데이터를 영속적으로 저장할 명명된 볼륨 (새로 추가)
  prometheus_data: # Prometheus 데이터 볼륨
  # grafana_data:
  nginx_logs: # <-- Nginx 로그를 위한 새로운 볼륨 정의

  # litellm_data: # LiteLLM 데이터용 볼륨 (필요시 주석 해제)