#.github/workflows/cicd.yml
name: Deploy to AWS EKS

on:
  push:
    branches:
      - eks-test  

jobs:
  deploy:
    runs-on: ubuntu-latest  # Ubuntu 최신 버전에서 실행

    env:
      TF_WORKING_DIR: ./terraform-related/terraform  # Terraform 작업 디렉토리
      ARGOCD_PASSWORD_HASH: $2a$10$8K9jKpK7a9c6xL8zFiZ65uHpYz9ROzAyl3PzGp6u2Fj0CeLccL5tK  # ArgoCD admin 비밀번호 해시

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # 코드 리포지토리에서 체크아웃

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2  # Terraform 설정

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4  # AWS 자격 증명 설정
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # GitHub secrets에서 AWS 액세스 키 가져오기
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # GitHub secrets에서 AWS 비밀 키 가져오기
          aws-region: ${{ vars.AWS_REGION || 'ap-northeast-2' }}  # AWS 지역 설정

      - name: Set Secrets as Environment Variables
        run: |
          # Terraform 변수로 직접 설정
          echo "TF_VAR_gemini_api_key=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_azure_api_key=${{ secrets.AZURE_API_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_azure_api_base=${{ secrets.AZURE_API_BASE }}" >> $GITHUB_ENV
          echo "TF_VAR_azure_api_version=${{ secrets.AZURE_API_VERSION }}" >> $GITHUB_ENV
          echo "TF_VAR_postgres_db=${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
          echo "TF_VAR_postgres_user=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
          echo "TF_VAR_postgres_password=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
          echo "TF_VAR_database_url=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "TF_VAR_litellm_master_key=${{ secrets.LITELLM_MASTER_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_litellm_salt_key=${{ secrets.LITELLM_SALT_KEY }}" >> $GITHUB_ENV
      - name: Terraform Init
        run: terraform init  # Terraform 초기화
        working-directory: ${{ env.TF_WORKING_DIR }}  # 작업 디렉토리 지정

      - name: Terraform Plan
        run: terraform plan -var-file="terraform.tfvars" -input=false  # Terraform 계획을 실행
        working-directory: ${{ env.TF_WORKING_DIR }}  # 작업 디렉토리 지정

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file="terraform.tfvars" -input=false  # Terraform 적용
        working-directory: ${{ env.TF_WORKING_DIR }}  # 작업 디렉토리 지정

      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --region ap-northeast-2 --name openwebui  # EKS 클러스터에 대한 kubeconfig 파일 업데이트

      # cicd.yml 파일 수정 부분
      - name: Apply aws-auth ConfigMap and wait for node
        run: |
          echo "Getting nodegroup role ARN..."
          NODE_ROLE_ARN=$(aws eks describe-nodegroup --cluster-name openwebui --nodegroup-name openwebui-nodegroup --query 'nodegroup.nodeRole' --output text)
  
          echo "Generating aws-auth ConfigMap with correct ARN: $NODE_ROLE_ARN"
          cat > aws-auth.yaml << EOF
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: aws-auth
            namespace: kube-system
          data:
            mapRoles: |
              - rolearn: $NODE_ROLE_ARN
                username: system:node:{{EC2PrivateDNSName}}
                groups:
                  - system:bootstrappers
                  - system:nodes
          EOF
  
          echo "Applying generated aws-auth ConfigMap..."
          kubectl apply -f aws-auth.yaml -n kube-system
  
          echo "Waiting for EKS node to register (up to 5 minutes)..."
          for i in {1..30}; do
            COUNT=$(kubectl get nodes --no-headers 2>/dev/null | wc -l)
            if [ "$COUNT" -gt 0 ]; then
              echo "✅ EKS node registered!"
              break
            fi
            echo "⏳ Still waiting for node... ($i/30)"
            sleep 10
          done
  
          if [ "$COUNT" -eq 0 ]; then
            echo "❌ Timeout: No EKS nodes registered after 5 minutes."
            kubectl get pods -n kube-system  # 디버깅 정보 추가
            kubectl describe configmap aws-auth -n kube-system
            exit 1
          fi

      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -  # ArgoCD 네임스페이스 생성
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml  # ArgoCD 설치

      - name: Wait for ArgoCD to be Ready
        run: |
          echo "Waiting for ArgoCD server pod to be ready..."  # ArgoCD 서버 Pod이 준비되기를 대기
          kubectl wait --for=condition=available --timeout=180s deployment/argocd-server -n argocd  # 180초 동안 ArgoCD 서버가 준비되길 대기

      - name: Expose ArgoCD Server with LoadBalancer
        run: kubectl apply -f argocd/argocd-server-service.yaml  # ArgoCD 서버를 LoadBalancer로 노출하여 외부에서 접근 가능하게 설정

      - name: Apply ArgoCD Application
        run: kubectl apply -f argocd/argocd-app.yaml  # ArgoCD 애플리케이션 배포
    # 로그인 오류로 주석 처리
    #  - name: Set ArgoCD admin password
    #    run: |
          # 평문 비밀번호 (your-password)를 bcrypt 해시로 변환
          # 이 단계는 미리 해시를 계산하거나 동적으로 생성 가능
    #      PASSWORD_HASH=${{ env.ARGOCD_PASSWORD_HASH }}
          
    #      echo "Patching ArgoCD admin password..."
    #      kubectl -n argocd patch secret argocd-secret \
    #        -p '{"stringData": {"admin.password": "'$PASSWORD_HASH'", "admin.passwordMtime": "'$(date +%FT%T%Z)'"}}'
          
    #      echo "Waiting for ArgoCD secret to update..."
    #      sleep 5
          
     #     echo "Restarting ArgoCD server to apply new password..."
     #     kubectl -n argocd rollout restart deployment argocd-server
        
      #    echo "Waiting for ArgoCD server to restart (up to 2 minutes)..."
      #    kubectl -n argocd rollout status deployment argocd-server --timeout=120s
          
          # 설정이 제대로 적용되었는지 확인 (비밀번호 해시만 확인)
       #   echo "Verifying password was set correctly..."
        #  if kubectl -n argocd get secret argocd-secret -o jsonpath='{.data.admin\.password}' | base64 -d | grep -q "$PASSWORD_HASH"; then
        #    echo "✅ Password successfully configured!"
        #  else
        #    echo "❌ Password configuration failed!"
        #    exit 1